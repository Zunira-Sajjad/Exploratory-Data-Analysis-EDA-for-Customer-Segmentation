# -*- coding: utf-8 -*-
"""TechElectro_dash.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jeDuc0ZN8IKDcq4EokAPJNYFrO49mrKw
"""

import pandas as pd
import numpy as np
import streamlit as st
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px


# Set random seed for reproducibility
np.random.seed(42)

# total customers 500
num_customers = 500

# Customer IDs
customer_ids = np.arange(1001, 1001 + num_customers)

# Ages between 18 and 65
ages = np.random.randint(18, 65, size=num_customers)

# Gender
genders = np.random.choice(['Male', 'Female'], size=num_customers)

# Marital status
marital_statuses = np.random.choice(['Married', 'Single', 'Divorced'], size=num_customers)

#  Annual income
annual_incomes = np.random.randint(40000, 120001, size=num_customers)

#  Total purchases between 5 and 25
total_purchases = np.random.randint(5, 25, size=num_customers)

# Preferred categories
preferred_categories = np.random.choice(['Electronics', 'Appliances', 'Clothing'], size=num_customers)

# Create a DataFrame
data = pd.DataFrame({
    'CustomerID': customer_ids,
    'Age': ages,
    'Gender': genders,
    'MaritalStatus': marital_statuses,
    'AnnualIncome': annual_incomes,
    'TotalPurchases': total_purchases,
    'PreferredCategory': preferred_categories
})
# Save the generated data to a CSV file
data.to_csv('TechElectro_Customer_Data.csv', index=False)



Label_Enc = LabelEncoder()
data['Gender'] = Label_Enc.fit_transform(data['Gender'])
data['MaritalStatus'] = Label_Enc.fit_transform(data['MaritalStatus'])
data['PreferredCategory'] = Label_Enc.fit_transform(data['PreferredCategory'])





scaler = MinMaxScaler()
numerical_columns = ['Age', 'AnnualIncome', 'TotalPurchases']
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

# Streamlit app
st.title("TechElectro Customer Segmentation Dashboard")

# Sidebar for user options
selected_feature = st.sidebar.selectbox("Select Feature to Visualize", numerical_columns)
num_clusters = st.sidebar.slider("Select Number of Clusters", min_value=2, max_value=10, value=4)

# EDA
st.header("Exploratory Data Analysis")

# Age distribution
st.subheader("Age Distribution")
fig_age = plt.figure(figsize=(8, 6))
sns.histplot(data['Age'], bins=20, kde=True)
st.pyplot(fig_age)

# Gender distribution as a pie chart
st.subheader("Gender Distribution")
fig_gender = plt.figure(figsize=(6, 6))
gender_counts = data['Gender'].value_counts()
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=140)
st.pyplot(fig_gender)

# Marital status distribution as a pie chart
st.subheader("Marital Status Distribution")
fig_marital = plt.figure(figsize=(6, 6))
marital_status_counts_total = data['MaritalStatus'].value_counts()
plt.pie(marital_status_counts_total, labels=marital_status_counts_total.index, autopct='%1.1f%%', startangle=140)
st.pyplot(fig_marital)

# Preferred category distribution
st.subheader("Preferred Category Distribution")
fig_category = plt.figure(figsize=(8, 6))
preferred_category_counts = data['PreferredCategory'].value_counts()
sns.barplot(x=preferred_category_counts, y=preferred_category_counts.index)
st.pyplot(fig_category)

# Pairplot for numerical features
st.subheader("Pairplot of Numerical Features")
fig_pairplot = sns.pairplot(data[numerical_columns])
st.pyplot(fig_pairplot)

# Customer Segmentation
st.header("Customer Segmentation")

# Perform K-means clustering
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
data['Cluster'] = kmeans.fit_predict(data)

# Visualize the clusters in a scatter plot
st.subheader("Customer Segmentation Scatter Plot")
fig_cluster = sns.scatterplot(x='Age', y='TotalPurchases', hue='Cluster', data=data, palette='Set1', alpha=0.8)
st.pyplot(fig_cluster)



# streamlit run TechElectro_dash.py
